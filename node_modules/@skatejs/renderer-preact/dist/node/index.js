'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /** @jsx h */

var _skatejs = require('skatejs');

var _preact = require('preact');

var _preact2 = _interopRequireDefault(_preact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO make this a Symbol() when it's supported.
const preactNodeName = '__preactNodeName';

let oldVnode;

function newVnode(vnode) {
  let fn = vnode.nodeName;
  if (fn && fn.prototype instanceof HTMLElement) {
    if (!fn[preactNodeName]) {
      const prefix = fn.name;
      customElements.define(fn[preactNodeName] = (0, _skatejs.name)(prefix), class extends fn {});
    }
    vnode.nodeName = fn[preactNodeName];
  }
  return vnode;
}

function setupPreact() {
  oldVnode = _preact2.default.options.vnode;
  _preact2.default.options.vnode = newVnode;
}

function teardownPreact() {
  _preact2.default.options.vnode = oldVnode;
}

exports.default = (Base = HTMLElement) => class extends Base {
  get props() {
    // We override props so that we can satisfy most use
    // cases for children by using a slot.
    return _extends({}, super.props, { children: (0, _preact.h)('slot', null) });
  }
  renderer(root, call) {
    setupPreact();
    this._renderRoot = root;
    this._preactDom = (0, _preact.render)(call(), root, this._preactDom || root.childNodes[0]);
    teardownPreact();
  }
  disconnectedCallback() {
    super.disconnectedCallback && super.disconnectedCallback();
    // Render null to unmount. See https://github.com/skatejs/skatejs/pull/1432#discussion_r183381359
    this._preactDom = (0, _preact.render)(null, this._renderRoot, this._preactDom);
    this._renderRoot = null;
  }
};
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var any = {
    default: function (elem, name, oldValue) { return null; },
    defined: function (ctor, name) { },
    deserialize: function (elem, name, oldValue, newValue) { return newValue; },
    get: function (elem, name, oldValue) { return oldValue; },
    serialize: function (elem, name, oldValue, newValue) { return newValue; },
    set: function (elem, name, oldValue, newValue) { return newValue; },
    source: function (propName) { return propName.toLowerCase(); },
    target: function (propName) { }
};
var array = __assign({}, any, { default: function () { return []; }, deserialize: function (elem, name, oldValue, newValue) { return JSON.parse(newValue); }, serialize: function (elem, name, oldValue, newValue) { return JSON.stringify(newValue); } });
var boolean = __assign({}, any, { deserialize: function (elem, name, oldValue, newValue) { return newValue != null; }, serialize: function (elem, name, oldValue, newValue) { return (newValue ? '' : null); } });
var event = __assign({}, any, { 
    // Takes an event handler and returns a function that is invoked with event
    // detail to trigger the corresponding event with.
    set: function (elem, name, oldValue, newValue) {
        // TODO see if we can deserialize to a standard onclick prop so that we
        // can support in-attribute handlers.
        var eventName = this.getEventName(name);
        if (oldValue) {
            elem.removeEventListener(eventName, oldValue);
        }
        if (newValue) {
            elem.addEventListener(eventName, newValue);
        }
        return function (detail) { return elem.dispatchEvent(new CustomEvent(eventName, { detail: detail })); };
    },
    // Standardizes custom event names:
    //
    // - Rremove "on" prefix.
    // - Event name becomes all lowercase.
    //
    // e.g. onCustomEvent -> customevent
    getEventName: function (name) {
        return name.substring(2).toLowerCase();
    } });
var number = __assign({}, any, { default: function () { return 0; }, deserialize: function (elem, name, oldValue, newValue) {
        return newValue == null ? 0 : Number(newValue);
    }, serialize: function (elem, name, oldValue, newValue) {
        return newValue == null ? null : String(Number(newValue));
    } });
var object = __assign({}, array, { default: function () { return ({}); } });
var string = __assign({}, any, { default: function () { return ''; }, deserialize: function (elem, name, oldValue, newValue) { return newValue; }, serialize: function (elem, name, oldValue, newValue) {
        return newValue == null ? null : String(newValue);
    } });
exports.props = {
    any: any,
    array: array,
    boolean: boolean,
    event: event,
    number: number,
    object: object,
    string: string
};

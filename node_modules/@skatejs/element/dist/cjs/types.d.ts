export interface CustomElement extends HTMLElement {
    attributeChangedCallback?(name: string, oldValue: string, newValue: string): any;
    childrenUpdated?(): any;
    connectedCallback?(): any;
    disconnectedCallback?(): any;
    forceUpdate?(): any;
    props?: Props;
    render?(...args: any[]): any;
    rendered?(props: Props): any;
    renderer?(root: Root, func: () => any): any;
    renderRoot?: Root;
    shouldRender?(props: Props): boolean;
    updated?(props: Props): any;
}
export interface CustomElementConstructor {
    new (): CustomElement;
    is?: string;
    observedAttributes?: Array<string>;
    name: string;
    props?: {};
    shadowRootOptions?: ShadowRootInit;
}
export declare type PropTypeDefault = (elem: CustomElement, name: string, oldValue: any) => any;
export declare type PropTypeDefined = (ctor: CustomElementConstructor, name: string) => void;
export declare type PropTypeDeserialize = (elem: CustomElement, name: string, oldValue: any, newValue: any) => any;
export declare type PropTypeGet = (elem: CustomElement, name: string, oldValue: any) => any;
export declare type PropTypeSerialize = (elem: CustomElement, name: string, oldValue: any, newValue: any) => string | void;
export declare type PropTypeSet = (elem: HTMLElement, name: string, oldValue: any, newValue: any) => void;
export declare type PropTypeSource = (name: string) => string | void;
export declare type PropTypeTarget = (name: string) => string | void;
export declare type DenormalizedPropType = {
    default?: PropTypeDefault;
    defined?: PropTypeDefined;
    deserialize?: PropTypeDeserialize;
    get?: PropTypeGet;
    serialize?: PropTypeSerialize;
    set?: PropTypeSet;
    source?: string | PropTypeSource;
    target?: string | PropTypeTarget;
    [s: string]: any;
};
export declare type NormalizedPropType = {
    default: PropTypeDefault;
    defined: PropTypeDefined;
    deserialize: PropTypeDeserialize;
    get: PropTypeGet;
    serialize: PropTypeSerialize;
    set: PropTypeSet;
    source: string | void;
    target: string | void;
    [s: string]: any;
};
export declare type NormalizedPropTypes = Array<{
    propName: string;
    propType: NormalizedPropType;
}>;
export declare type ObservedAttributes = Array<string>;
export declare type Props = {
    [s: string]: any;
};
export declare type PropType = ArrayConstructor | BooleanConstructor | NumberConstructor | ObjectConstructor | StringConstructor | DenormalizedPropType;
export declare type PropTypes = {
    [s: string]: PropType;
};
export declare type Root = HTMLElement | ShadowRoot;

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var props_1 = require("./props");
// @ts-ignore
var mapAttrsToProps = new Map();
// @ts-ignore
var mapPropsToTypes = new Map();
// @ts-ignore
var mapNativeToPropType = new Map();
mapNativeToPropType.set(Array, props_1.props.array);
mapNativeToPropType.set(Boolean, props_1.props.boolean);
mapNativeToPropType.set(Event, props_1.props.event);
mapNativeToPropType.set(Number, props_1.props.number);
mapNativeToPropType.set(Object, props_1.props.object);
mapNativeToPropType.set(String, props_1.props.string);
function defineProp(ctor, propName, propType) {
    var source = propType.source, target = propType.target;
    mapAttrsToProps.get(ctor)[source] = propName;
    mapPropsToTypes.get(ctor)[propName] = propType;
    Object.defineProperty(ctor.prototype, propName, {
        configurable: true,
        get: function () {
            var oldValue = this._props[propName];
            var newValue = propType.get(this, propName, oldValue);
            return newValue == null
                ? propType.default(this, propName, oldValue)
                : newValue;
        },
        set: function (newPropValue) {
            var _this = this;
            var oldPropValue = this._props[propName];
            this._propsChanged[propName] = oldPropValue;
            this._props[propName] = propType.set(this, propName, oldPropValue, newPropValue);
            if (target) {
                // We must delay attribute sets because property sets that are
                // initialized in the constructor result in attributes being set
                // and if an attribute is set in the constructor, the DOM throws.
                delay(function () {
                    var attrValue = propType.serialize(_this, propName, oldPropValue, newPropValue);
                    if (attrValue == null) {
                        _this.removeAttribute(target);
                    }
                    else {
                        _this.setAttribute(target, attrValue);
                    }
                });
            }
            this.forceUpdate();
        }
    });
    propType.defined(ctor, propName);
}
function defineProps(ctor, props) {
    mapAttrsToProps.set(ctor, {});
    mapPropsToTypes.set(ctor, {});
    props.forEach(function (_a) {
        var propName = _a.propName, propType = _a.propType;
        return defineProp(ctor, propName, propType);
    });
}
function delay(fn) {
    if (typeof global.Promise === 'function') {
        // @ts-ignore - Promise.resove() indeed does exist.
        global.Promise.resolve().then(fn);
    }
    else {
        setTimeout(fn);
    }
}
function deriveAttrsFromProps(props) {
    return props.map(function (_a) {
        var propType = _a.propType;
        return propType.source;
    });
}
function ensureFunction(type) {
    return typeof type === 'function' ? type : function () { return type; };
}
function normalizePropTypes(propTypes) {
    return Object.keys(propTypes).map(function (propName) {
        var propType = mapNativeToPropType.get(propTypes[propName]) ||
            propTypes[propName] ||
            props_1.props.any;
        return {
            propName: propName,
            propType: __assign({}, propType, { default: ensureFunction(propType.default), defined: ensureFunction(propType.defined), deserialize: ensureFunction(propType.deserialize), get: ensureFunction(propType.get), serialize: ensureFunction(propType.serialize), set: ensureFunction(propType.set), source: ensureFunction(propType.source)(propName), target: ensureFunction(propType.target)(propName) })
        };
    });
}
function observeChildren(elem) {
    var hasChildrenChanged = elem.childrenChanged;
    var hasChildrenPropType = elem.constructor.props.children;
    if (hasChildrenChanged || hasChildrenPropType) {
        var mo = new MutationObserver(function () {
            if (hasChildrenChanged) {
                elem.childrenChanged();
            }
            if (hasChildrenPropType) {
                elem.forceUpdate();
            }
        });
        // We only need to observe direct children since we only care about light
        // DOM.
        mo.observe(elem, { childList: true });
        // We wait for DOMContentLoaded to ensure the childList is complete. We
        // also don't need to forceUpdate here as that will happen anyways.
        if (hasChildrenChanged) {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', function () {
                    elem.childrenChanged();
                });
            }
            else {
                elem.childrenChanged();
            }
        }
    }
}
function withProps(Base) {
    if (Base === void 0) { Base = HTMLElement; }
    defineProps(Base, normalizePropTypes(Base.props));
}
exports.withProps = withProps;
var Component = /** @class */ (function (_super) {
    __extends(Component, _super);
    function Component() {
        var _this = _super.call(this) || this;
        // The current props values.
        _this._props = {};
        // The current props values that have changed since the last update.
        _this._propsChanged = {};
        // Whether or not an update is currently being handled.
        _this._isUpdating = false;
        if (!_this.shadowRoot) {
            var shadowRootOptions = _this.constructor.shadowRootOptions;
            _this.renderRoot = shadowRootOptions
                ? _this.attachShadow(shadowRootOptions)
                : _this;
        }
        return _this;
    }
    Object.defineProperty(Component, "observedAttributes", {
        get: function () {
            var normalized = normalizePropTypes(this.props);
            defineProps(this, normalized);
            return deriveAttrsFromProps(normalized);
        },
        enumerable: true,
        configurable: true
    });
    Component.prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {
        var constructor = this.constructor;
        var propName = mapAttrsToProps.get(constructor)[attrName];
        if (propName) {
            this._props[propName] = mapPropsToTypes
                .get(constructor)[propName].deserialize(this, attrName, oldValue, newValue);
            this.forceUpdate();
        }
    };
    Component.prototype.connectedCallback = function () {
        // We observe updates when connected because there's no point in
        // observing if it's not connected yet.
        observeChildren(this);
        // This does the initial render. This is necessary as props wouldn't be
        // triggering a render yet.
        this.forceUpdate();
    };
    Component.prototype.disconnectedCallback = function () { };
    Component.prototype.forceUpdate = function () {
        var _this = this;
        // We don't need to render when:
        //
        // - We're already updating.
        // - We're not connected.
        if (this._isUpdating || !this.parentNode) {
            return;
        }
        // This flag prevents infinite loops if another update is triggered while
        // performing the current update.
        this._isUpdating = true;
        // We execute the update process at the end of the current microtask so
        // we can debounce any subsequent updates using the _propsUpdating flag.
        delay(function () {
            _this.updated(_this._propsChanged);
            if (_this.shouldUpdateRender(_this._propsChanged)) {
                _this.renderer();
                _this.rendered(_this._propsChanged);
            }
            _this._propsChanged = {};
            _this._isUpdating = false;
        });
    };
    Component.prototype.render = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return '';
    };
    Component.prototype.rendered = function (props) { };
    Component.prototype.renderer = function () {
        this.renderRoot.innerHTML = this.render();
    };
    Component.prototype.shouldUpdateRender = function (props) {
        return true;
    };
    Component.prototype.updated = function (props) { };
    // Props / attributes the component should observe.
    Component.props = {};
    // Options when automatically creating the shadow root. This can be set to
    // a falsy value to prevent shadow root creation.
    Component.shadowRootOptions = { mode: 'open' };
    return Component;
}(HTMLElement));
exports.default = Component;

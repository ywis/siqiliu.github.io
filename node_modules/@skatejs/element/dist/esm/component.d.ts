import { CustomElement, CustomElementConstructor, Props, PropTypes } from './types';
export declare function withProps(Base?: CustomElementConstructor): void;
export default class Component extends HTMLElement implements CustomElement {
    ['constructor']: CustomElementConstructor;
    static props?: PropTypes;
    static shadowRootOptions?: ShadowRootInit;
    private _props;
    private _propsChanged;
    private _isUpdating;
    renderRoot: ShadowRoot | HTMLElement;
    static readonly observedAttributes: string[];
    constructor();
    attributeChangedCallback(attrName: string, oldValue: string | null, newValue: string | null): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    forceUpdate(): void;
    render(...args: any[]): any;
    rendered(props: Props): void;
    renderer(): void;
    shouldUpdateRender(props: Props): boolean;
    updated(props: Props): void;
}
